' Gambas class file

Private sVPNname As String ' Name of VPN working connection
Private VPN_Data_Names As New String[]
Private sVPNnameSettings As String ' Name of VPN settings connection

Private sApplis As String ' Name of the application in process
Private sNumberApplis As String ' Number of applications

Private bFlag As Boolean ' Flag of connection after disconnection

Public Apps_Killed As Boolean ' flag that apps have been killed
Public ChangeVPN As Boolean = False ' flag to set true when VPN connection settings are being changed
Public VPN_Found As Boolean = False ' flag to set true when active VPN connection found
Public CheckUseSettingsVPN As Boolean = True ' flag whther to prompt for change connection to settings
Public VPN_Loop_Found As Boolean
Public ChangeConfig As Boolean = False

Public GetConnection As Boolean = False ' flag that vpn active connection method is in progress
Public Disconnections As Integer = 0 ' count of succesive disconnections
Public ReConnectingVPN As Boolean = False
'Public IP_Address As String
Public AppsInit As Boolean = True ' flag whether to print monitored apps started log entry
Public ActiveVPNConnectionFound As Boolean ' flag that active vpn connection was found
'Public timerCheckVPN_totalTime As Integer = 0 ' tracks total time for timerReload_Timer
Public InitVPN As Boolean = True

Public pr As Process
Public NL As String = Chr$(10)

Public WaitForAppsToStart As Boolean = False
Public WaitPeriods As Integer = 1
Public Web_Data_Count As Integer = 0
Public CheckingWebState As Boolean = False
Public WebChecks As Integer = 0
Public WebStateUp As Boolean = True
Public AppsStarted As Boolean = False

'For internet connection check settings
Public ConnectCheckWebsite As String = "http://www.google.com"
Public CheckInternet As Boolean = True
Public CanConnectToGoogle As Boolean = True
Public InternetConnectLostQuitApp As Boolean = True

 
'Public WriteDummyStatus As Boolean = True
 

Public Sub Form_Open()
  
  Dim Initialize As String = "Log File initialized " 
  
  lblStatusBar.Text = "Disconnected"
  
  cmdAbout.SetFocus
  
  ' Read settings and set checkbox applications
  ReadSettings
  
  ' set monitoring on vpn connection
  pr = Shell "dbus-monitor --system type='signal',interface='org.freedesktop.NetworkManager.VPN.Connection',member='VpnStateChanged'" For Read As "procDBusMonitor"
  
  ' enable timer
  timerReload.Delay = 1000 ' 1 second
  timerReload.Enabled = True
  
  lblStatusBar.Text = "Connection..."
  
  ' following line used to add current ip address to log entry
  'Shell "curl ifconfig.me" To IP_Address
  
 ' Initialize &= GetTime()  
 InitVPN = True
 
 Initialize = AddTime(Initialize)
  Initialize = NL & Initialize & NL
  'Initialize &= " IP Address = " & IP_Address & " " & GetTime()  
  WriteToLogFile("Initialize", Initialize)
  
  WriteToWebStatusFile("Initialize", "WebStatus = 200 OK")
      
  Wait 0.1
  
  ' Load vpn list to main window
  LoadVPN_Data()
 
  
End

Public Function AddTime(sMessage As String) As String
  
  sMessage = GetTime() & "  " & sMessage
  Return sMessage
  
End


Public Function GetTime() As String
  
  Dim date_time As String
  
  Shell "date +'%Y-%m-%d %I:%M:%S'" To date_time
  
  Dim pos As Integer = InStr(date_time, Chr(10), 1)
  date_time = Mid(date_time, 1, pos - 1)
  
  Return date_time
  
End

Public Sub cmdConfig_Click()
  
  ChangeConfig = True
 
  SetApplicationsToManage()
  
  SetInternetConnectCheck()
  
  Store_VPN()
  
  Settings.Save
  
  Wait 1 '2 s
  
  ReadSettings()
  
  'CreateVPN_List_Files()
  
  Load_VPNs_pswd()
  
  ChangeConfig = False
  
End

Public Sub SetApplicationsToManage()
  
   Dim iApplis As Byte
  
   If Message.Question("Do you want to modify the list of applications to manage ?", "Yes", "No") = 1 Then
    
  ask:
    sNumberApplis = InputBox("How many applications to manage ?", "Type a number")
    
    ' check format value
    
    If IsNumber(sNumberApplis) Then
      
      Settings["Applications to manage/N"] = CByte(sNumberApplis)
      
      For iApplis = 1 To 6
        
        If iApplis <= CByte(sNumberApplis) Then
          
          sApplis = InputBox("What is the name of the #" & iApplis & " application to manage ?" & Chr(13) & NL & "For example : transmission or firefox", "Type a name of application")
          
        Else
          
          sApplis = ""
          
        Endif ' Number applis
        
        Settings["Applications to manage/Appli #" & iApplis] = sApplis
        
      Next ' next checkbox / application
      
      ReadSettings ' and set checkbox
      
    Else
      Message("Please, type a number")
      Goto ask
    Endif
    
  Endif ' Prompt yes/nov
  
End


Public Sub Load_VPNs_pswd()
  
  ' Called from cmdConfig_Click()
  
  If Message.Question("Do you want to loop throught the VPNs to enter the passwords?", "Yes ", " No ") = 1 Then   
  
  ' wait for current GetActiveVpnConnection() operation to finish
    While GetConnection = True
      Sleep 0.010
    Wend
  
    GetActiveVpnConnection("PSWD")
  
  Endif
  
End

Public Sub SetInternetConnectCheck()
  
  If Message.Question("This app checks the internet connection every 2 minutes by default. Would you like it to do this?", "Yes ", " No ") = 1 Then   
  
    CheckInternet = True
    ConnectToGoogleOrNot()
    SetInternetConnectionCheckMode()
  
  Else
    
     CheckInternet = False
  
  Endif
  
  SaveInternetConnectionSettings()
  
End

Public Sub ConnectToGoogleOrNot()
  
  If Message.Question("Can you connect to google.com?", "Yes ", " No ") = 1 Then   
  
    ConnectCheckWebsite = "http://www.google.com"
    CanConnectToGoogle = True
  
  Else
    
    CanConnectToGoogle = False
    SetAlternateInternetConnectCheckWebsite()
  
  Endif
  
End
Public Sub SetAlternateInternetConnectCheckWebsite()
  
    ConnectCheckWebsite = InputBox("Enter a website. For Example: http://www.google.com", "Enter website ...") 
  
End

Public Sub SetInternetConnectionCheckMode()
  
  If Message.Question("If the internet connection is lost would you like to (Yes) quit the app, or (No) continually try to re-connect the vpn?", " Yes ", " No ") = 1 Then 
  
    InternetConnectLostQuitApp = True
  ' wait for current GetActiveVpnConnection() operation to finish
  Else
    
    InternetConnectLostQuitApp = False
  
  Endif
  
End

Public Sub SaveInternetConnectionSettings()
  
   Settings["Internet Connection Check/ConnectCheckWebsite"] = ConnectCheckWebsite
   Settings["Internet Connection Check/CheckInternet"] = CheckInternet
   Settings["Internet Connection Check/CanConnectToGoogle"] = CanConnectToGoogle
   Settings["Internet Connection Check/InternetConnectLostQuitApp"] = InternetConnectLostQuitApp
  
End

Public Sub LoadInternetConnectionSettings()
  
  ConnectCheckWebsite = Settings["Internet Connection Check/ConnectCheckWebsite"] 
  CheckInternet = Settings["Internet Connection Check/CheckInternet"] 
  CanConnectToGoogle = Settings["Internet Connection Check/CanConnectToGoogle"] 
  InternetConnectLostQuitApp = Settings["Internet Connection Check/InternetConnectLostQuitApp"] 
  
End



Public Sub ConnectVPN_Click()
  
  ' Called when user clicks 'Connect VPN' on main window
  
  ' wait for current GetActiveVpnConnection() operation to finish
  While GetConnection = True
    Sleep 0.010
  Wend
  
  GetActiveVpnConnection("Init")
  
End

Public Sub GetActiveVpnConnection(sMode As String)

  ' sMode used in the foloowing procedures:
  
  ' sMode = 'Config' : used in LoadVPN_Data() : to save all possible vpn connections to files to load list to main window (in ReadVPN_Data() procedure)
  ' sMode = 'Init' : used in ConnectVPN_Click() : to connect vpn from list on main window
  ' sMode = 'Check' : used in timerReload_Timer() : to check active vpn connections
  
  Dim sVPNuuidLoop As String ' ID of the VPN loop connection
  Dim sVPNnameLoop As String ' Name of VPN loop connection
  Dim sRet As String
  Dim VPN_Names_Array As New String[]
  Dim ActiveState As String
  Dim sOutput_VPNS As String = ""
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/VPNs_data.csv"
  'Dim i As Integer
  Dim name As String
  Dim VPNs_Array As New String[]
  Dim line_items As New String[]
  Dim sLine As String
  Dim Break_loop As Boolean = False
 
  'flag that current method is in progress
  GetConnection = True

  sVPNnameSettings = Settings["VPN Connection/Name"]
  'sVPNuuidSettings = Settings["VPN Connection/UUID"] 
  
  ActiveVPNConnectionFound = False
  VPN_Loop_Found = False
  'VPN_Settings_Used = False
  VPN_Found = False
  
  ' get informations on connection to get name and vpn ID
  Shell "nmcli -t -f TYPE,NAME,UUID,ACTIVE c | grep vpn" To sRet
  
  VPNs_Array = Split(sRet, "\n")
  
 ' Loop through all vpn connections to find active vpn connections
  'While sVPNnameLoop <> "vpn"
  For Each sLine In VPNs_Array ' Begin VPN Lopp 
    
    If sLine <> "" Then
      
      line_items = Split(sLine, ":")
     
      sVPNnameLoop = line_items[1]  
      sVPNuuidLoop = line_items[2]
      ActiveState = line_items[3]
      
      If sMode = "Config" Then
      
        VPN_Names_Array.Add(sVPNnameLoop)
      
      Endif
    
    Endif
    
    ' Used for Connect VPN button (for ConnectVPN_Click())
    ' See if user wants to keep current vpn connection
    If sMode = "Init" Then 'And VPN_Loop_Found = False Then
      
      Break_loop = GAVC_Loop_Init(ActiveState, sVPNnameLoop)
      If Break_loop = True Then
        Break
      Endif
      
    End If
    
    ' If Config button was clicked on main window
     ' Used in Config to loop through vpns to set passwords
    If sMode = "PSWD" And sVPNnameLoop <> "vpn" Then
     
      Break_loop = GAVC_Loop_PSWD(sVPNnameLoop) 
      If Break_loop = True Then
        Break
      Endif
     
    Endif
    
    ' Used for timerReload_Timer() : to check active vpn connections
    ' Check for active vpn connection
    If sMode = "Check" And VPN_Loop_Found = False Then 
      
      Break_loop = GAVC_Loop_Check(ActiveState, sVPNnameLoop)
      If Break_loop = True Then
        Break
      Endif
     
    Endif
        
  Next ' End VPN Loop
  
  ' Save all vpn connections to file for loading to main window (for LoadVPN_Data())
  If sMode = "Config" Then
    
    For Each name In VPN_Names_Array 
         
      sOutput_VPNS &= name & "\n"
              
    Next
 
    File.Save(FileName, sOutput_VPNs)
   
  Endif
  
  ' Establish vpn connection
  ' - for ConnectVPN_Click()
  GAVC_Init_Connect(sMode)
    
  ' Set flag to restart monitored applications if Connect VPN button was clicked
  'If sMode = "Init" And sVPNname <> "" Then
  '  bFlag = True
  'Endif
  
  GetConnection = False
  
End

Public Function GAVC_Loop_Init(ActiveState As String, sVPNnameLoop As String) As Boolean
  
  ' See if user wants to keep current vpn connection
  
  Dim Break_loop As Boolean = False
  
  If ActiveState = "yes" Then
        
    If Message.Question("Do you want keep the following VPN Connection? " & NL & "You should only keep 1 ..." & NL & "VPN Connection = " & sVPNnameLoop, " Yes ", " No ") = 1 Then  
  
       sVPNname = sVPNnameLoop
       VPN_Loop_Found = True
          
    Else
   
      KillApplis()
          
       ' So to have only 1 active vpn connection
      Shell "nmcli con down id " & Shell$(sVPNnameLoop)
          
      If VPN_Loop_Found = False Then
              
        sVPNname = ""
        
      Endif
   
      Wait 1 's
          
    Endif
        
  Else If ActiveState = "no"
        
     Break_loop = True
        
  Endif
  
  Return Break_loop
   
End

Public Function GAVC_Loop_Check(ActiveState As String, sVPNnameLoop As String) As Boolean
  
  ' Check for active vpn connection
  
  Dim Break_loop As Boolean = False
 
  If ActiveState = "yes" Then
        
    If sVPNname = sVPNnameLoop Then
          
      ActiveVPNConnectionFound = True
      VPN_Loop_Found = True
      Break_loop = True
          
    Else
          
      Message("You have more than 1 VPN connection .. do you want this?")
          
    Endif
  Endif
  
  Return Break_loop
  
End

Public Function GAVC_Loop_PSWD(sVPNnameLoop As String) As Boolean
  
  ' Used in Config to loop through vpns to set passwords
  
  Dim Break_loop As Boolean = False
  
  If sVPNname <> sVPNnameLoop Then
        
    If Message.Question("Select Yes to connect the next vpn and enter the password ..." & NL & NL & "vpn = " & sVPNnameLoop, "Yes ", " No ") = 1 Then   
          
      Shell "nmcli con up id " & Shell$(sVPNnameLoop)
          
      Message("Press OK to disconnect the current connected vpn ...")
          
      Shell "nmcli con down id " & Shell$(sVPNnameLoop)
          
    Endif
        
    If Message.Question("Select Yes to exit this loop ... ", "Yes ", " No ") = 1 Then   
          
      Break_loop = True
          
    Endif  
  Endif       
  
  Return Break_loop
  
End

Public Sub GAVC_Init_Connect(sMode As String)
  
  ' Establish vpn connection
  
  Dim VPN_Settings_Used As Boolean = False 
  
  If ChangeVPN = False And sMode = "Init" Then ' Begin IF 1
    
    ' Get settings connection if chosen
    VPN_Settings_Used = GAVC_Init_Connect_Settings(VPN_Settings_Used)
    
    'If settings connection not chosen, establish vpn for selection
    GAVC_Init_Connect_Selection(VPN_Settings_Used)
    
    ' Set flag to start or restart monitored applications if Connect VPN button was clicked
    bFlag = True
    StartApps()
    
  End If 'End If 1 
  
End

Public Function GAVC_Init_Connect_Settings(VPN_Settings_Used As Boolean) As Boolean
  
  ' Establishes vpn connection from settings if selected
  
  If CheckUseSettingsVPN = True ' Begin IF 2
    
    If sVPNname <> sVPNnameSettings Then ' Begin IF 3
        
      If sVPNname <> "" Then
        Store_VPN()
      Endif
        
      If Message.Question("Would you like to connect to your VPN settings connection?" & NL & "VPN current Connection = " & sVPNname & NL & "VPN settings Connection = " & sVPNnameSettings, " Yes ", " No ") = 1 Then   
          
        If VPN_Found = True Then
            
          KillApplis()
            
          Shell "nmcli con down id " & Shell$(sVPNname) 'Wait
            
        Endif
          
        VPN_Settings_Used = True
        sVPNname = sVPNnameSettings
          'sVPNnameCurrent = sVPNname
          
        Shell "nmcli con up id " & Shell$(sVPNname) 'Wait
   
       
      Endif
        
      If Message.Question("Click Yes not to see the settings prompt any more this session ...", " Yes ", " No ") = 1 Then   
        CheckUseSettingsVPN = False
      Endif
    Endif ' End IF 3
  Endif ' End IF 2
  
  Return VPN_Settings_Used
  
End


Public Sub GAVC_Init_Connect_Selection(VPN_Settings_Used As Boolean)

  ' Establishes vpn connection from selection on main window

  Dim i As Integer

  If VPN_Settings_Used = False Then ' Begin IF 4
      
    For i = 0 To VPN_Names.Count - 1 ' Loop through VPN names on main window
        
      If VPN_Names[i].Selected Then ' Begin IF 5
          
        If sVPNname <> VPN_Names[i].Text Then
            
          If sVPNname <> ""
            
            KillApplis()
            
            Shell "nmcli con down id " & Shell$(sVPNname) 'Wait
              
          Endif
        Endif
          
        sVPNname = VPN_Data_Names[i]
          
        Shell "nmcli con up id " & Shell$(sVPNname) 'Wait
        bFlag = True
        StartApps()
          
      Endif ' End IF 5
    Next ' End VPN main window loop
  Endif ' End IF 4
    
End 

Public Sub ReadVPN_Data()
  
  ' This method used in LoadVPN_Data()
  ' Used to read all vpn possible connections to diplay list on main window
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/VPNs_data.csv"
  Dim sLine As String
  Dim VPN_data As String[]
  'Dim line_items As New String[]
  'Dim ctr As Integer = 0
  
  If Not Exist(FileName) Then 
    Message("VPN File missing ... quit and restart application")
  Endif
  
  VPN_data = Split(File.Load(FileName), "\n")
 
  For Each sLine In VPN_data
    
    If sLine <> "" Then
      
      VPN_Data_Names.Add(sLine)
    
    Endif
    
  Next
  
  VPN_Names.List = VPN_Data_Names
  
End

Public Sub LoadVPN_Data()
  
  ' Used in method Form_Open() to load vpn list to main window
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/VPNs_data.csv"
  
  If Not Exist(FileName) Then ' Or Not Exist(FileName2) Then
    
    ' wait for current GetActiveVpnConnection() operation to finish
    While GetConnection = True
      Sleep 0.010
    Wend
    
    GetActiveVpnConnection("Config")
    
  Endif
  
  ReadVPN_Data()
  
End

Public Sub cmdAbout_Click()
  ' Show the about form
  
  FAbout.ShowModal
  
End

Private Sub Store_VPN()
  
  ' This procedure used by:
  
  ' - GetActiveVpnConnection() : to store current vpn connections to settings 
  ' - cmdConfig_Click() : to store current vpn connections to settings 
  
  ChangeVPN = True
  
  If Message.Question("Do you want add the current VPN Connection to the settings?" & NL & "VPN current name= " & sVPNname & NL & "VPN current settings = " & sVPNnameSettings & NL & "If settings is blank, choose Yes.", " Yes ", " No ") = 1 Then  
    
    'If VPN_Found = True Then
      
      Settings["VPN Connection/Name"] = sVPNname
      Settings.Save
      Sleep 2
      sVPNnameSettings = Settings["VPN Connection/Name"]
      
    'Endif
    
  Endif ' Prompt yes/no
  
  ChangeVPN = False
  
End

Private Sub ReadSettings()
  ' Read settings and set checkbox applications
  
  LoadApplicationsToManage()  
  LoadInternetConnectionSettings()
  
End

Public Sub LoadApplicationsToManage()
  
   Dim chk As Object, k As Byte
  
  ' Get the number of applications to manage
  sNumberApplis = Settings["Applications to manage/N", 0]
  
  k = 1 ' initialize
  
  ' For each checkbox of applications
  For Each chk In FMain.Controls
    
    ' If control is a checkbox
    If chk.Tag = "chkApplis" Then
      
      ' Get settings of applications'name
      sApplis = Settings["Applications to manage/Appli #" & k, ""]
      
      If k <= CByte(sNumberApplis) Then
        ' Appli to manage
        chk.Text = sApplis
        chk.visible = True
        chk.value = True
      Else
        ' No application
        chk.Text = ""
        chk.visible = False
        chk.value = False
      Endif
      
      Inc k
      
    Endif
  Next
  
End


Public Sub CheckConnections()
  
  ' Used by timerReload_Timer() to get status of active vpn connections
  
  Dim sMessage As String
 
  ' wait for current GetActiveVpnConnection() operation to finish
  While GetConnection = True
    Sleep 0.010
  Wend
 
 ' Sets ActiveVPNConnectionFound
  GetActiveVpnConnection("Check")
  
  If ActiveVPNConnectionFound = False Then
    sMessage = "VPN Connection lost ... probably internet connection lost ... " '& ' GetTime()
  Else
    sMessage = "VPN Connection good ... internet connection and vpn connection good ... " ' & GetTime()
  Endif
  
  sMessage = AddTime(sMessage)
  'Wait 0.1
  WriteToLogFile("Append", sMessage)
   
End


Public Sub timerReload_Timer()
  
  ' Called every 10 seconds to check vpn and iternet connection
  ' and to start or re-start apps if necessary
  
  Dim sRet As String
  Dim sCommand As String

  ' Timer to check state of VPN connection
  ' if connected = ok, nothing to do
  ' if disconnected = connect and reload apps
  
  timerReload.Delay = 10000 ' 10 seconds
  
  Print "ReConnectingVPN = ", ReConnectingVPN
 
  'Global vars
  ' ReConnectingVPN = True if ReConnectVPN() is called to 
  ' restablish lost vpn connection Or no internet connection
  ' CheckingWebState = True if no internet connection found
  If ReConnectingVPN = True Or CheckingWebState = True Or ChangeConfig = True Then
    Return
  Endif
 
  ' Check if there is a current internet connection  
  ' Checks connection every 2 minutes
  If CheckInternet = True Then
    GetWebState()
  Endif
   
  ' get status of all connections 
  sCommand = "nmcli con show --active | grep " & sVPNname
  Shell sCommand To sRet
  

  ' WebStateUp = True means  connected to the internet
  If InStr(sRet, sVPNname) <> 0 And WebStateUp = True Then
     
     'There is an internet connection and a vpn connection so start apps if necessary  
     StartApps()
    
 Else
       
    ' the vpn is disconnected then reconnect vpn, or there is no internet connection
    ReConnectVPN(sRet) 
       
  Endif
  
End

Public Function GetWebData() As String
  
  ' Called by timerReload_Timer()
  ' Checks for status of whether or not can connect to google.com
  ' to see if there is an active internet connection
  ' Checks connection every 2 minutes
 
  Dim WebCheckMax As Integer = 12 ' Counter for timerReload_Timer() to check internet connection every 2 minutes (12 x timer(10 seconds) = 2 minutes)
  Dim sCheckWebCommand As String
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/web_status.txt"
'  Dim sCheckWebCommand2 As String
  
  Web_Data_Count += 1
  
  Print "Web_data_count init = ", Web_Data_Count
 
  If Web_Data_Count >= WebCheckMax Or CheckingWebState = True Or InitVPN = True Then
    
    'If WriteDummyStatus = True And WebChecks <= 10 Then
    '  WriteToWebStatusFile("Initialize", "dummy")
    'Else If WriteDummyStatus = True And WebChecks > 10 Then
    '  WriteDummyStatus = False
    '  WebChecks = 0
    'Else
      sCheckWebCommand = "wget -nv --spider " & ConnectCheckWebsite & " --append-output=" & FileName & " -o " & Filename
      Shell sCheckWebCommand ' To WebStatus
    'Endif
    
    If InitVPN = True Then
      InitVPN = False
    Endif
   
    Wait 0.2
    
  End If
  
  Dim Web_data As String[]
  
  'If Not Exist(FileName) Then 
  '  Message("Web File missing ... quit and restart application")
 ' Endif
  
  Web_data = Split(File.Load(FileName), "\n")
  
  Dim count As Integer = Web_data.Count
  
  Dim Web_data_last_item As String = Web_data[count - 2]
  
  If Web_Data_Count >= WebCheckMax Or CheckingWebState = True Then
   
    Print "Web_data_count = ", count
    Print "WebStatus = ", Web_data_last_item  
    If Web_data_count >= WebCheckMax Then
      Web_data_count = 0
    End If
  
  End If
  
  Return Web_data_last_item
  
End

Public Sub GetWebState()
  
  'Sets global vars WebStateUp and CheckingWebState
  
  Dim WebCheckMax As Integer = 12
  Dim Web_data_last_item As String 
  Dim sMessage As String
 
 CheckWeb:
  
   WebChecks += 1
   
   Web_data_last_item = GetWebData()
  
   If InStr(Web_data_last_item, "200 OK") Then
      WebStateUp = True
      CheckingWebState = False
      WebChecks = 0
     ' Break
  Else
    WebStateUp = False
    If WebChecks <= 10 Then
      Print "Checking Web State"
      CheckingWebState = True
      Wait 0.5
      Web_data_count = WebCheckMax - 1
      Goto CheckWeb
    Else
      CheckingWebState = False
    Endif
  End If
  
  If WebStateUp = False Then
    sMessage = "Check web state ... Internet connection lost ... " 
    Print sMessage
    sMessage = AddTime(sMessage)     
    WriteToLogFile("Append", sMessage)
  Endif
  
End


Public Sub StartApps()
  
  ' Starts apps if not already started
  
  Dim chk As Object
  Dim sEntry As String = "VPN Connection re-established and Application(s) restarted ... " 
  Dim sEntry2 As String = "Application(s) restarted ... " 
  Dim sCouldnt_Kill As String = "VPN Connection re-established and Application(s) already running ... " 
  Dim sApp As String = ""
  Dim sApplications_Init As String = "Monitored application started on initialization ... "
  Dim sMessage As String
  Dim app_to_start As String
  Dim sAppsRestarted As Boolean = False
  
  lblStatusBar.Text = "Connected + monitoring : VPN = " & sVPNname
    
  ' For itermtittent apps that can crash 
  If AppsStarted = True Then
    For Each chk In FMain.Controls 
      If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then 
        Shell "pgrep " & chk.Text Wait To app_to_start
        If app_to_start = "" Then         
          'If Apps_Killed = False
          sAppsRestarted = True 
          bFlag = True
          'End If
        End If
      End If
    Next
  End If
    
  If bFlag = True Then
    ' after reconnection, reload applis
    bFlag = False
      
    'Shell "notify-send --expire-time=1000 --hint=int:transient:1 'VPN connected'"
    NotifySend("VPN connected", "")
    lblStatusBar.Text = "Connected and reloading applications..."
      
    If WaitForAppsToStart = True Then
        
      ' Wait for apps to start ... so skip loading apps if already loading
      WaitPeriods += 1
        
      If WaitPeriods > 1 Then
        WaitForAppsToStart = False
        WaitPeriods = 1
      End If
        
      Return
        
        'Wait 21 ' 21 seconds
        
    Endif
      
    For Each chk In FMain.Controls
      ' each checkbox
      If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then
          
        ' load applications
        sApp = chk.Text
          
        If AppsInit = True Then
          sMessage = sApplications_Init & sApp & " ... " 
       Else If Apps_Killed = True Then            
          sMessage = sEntry & sApp & " ... " 
       Else If sAppsRestarted = True Then         
          sMessage = sEntry2 & sApp & " ... " 
       Else
          sMessage = sCouldnt_Kill & sApp & " ... " 
       Endif
  
        sMessage = AddTime(sMessage)
        
        Shell "pgrep " & chk.Text Wait To app_to_start
          
        If app_to_start = ""
          Shell "exec " & chk.Text 
          WriteToLogFile("Append", sMessage)
        End If
          
        ' Wait for app to start
        'Wait 11 ' 21 seconds
          
        'WaitForAppsToStart = True
          
          
      Endif
        
    Next
    
    AppsStarted = True
      
    If AppsInit = True Then
      AppsInit = False
    Endif
      
    lblStatusBar.Text = "Connected + monitoring : VPN = " & sVPNname
      
  Endif

  
End

Public Sub ReConnectVPN(sRet As String)
  
  ' Called if there is no internet connection or vpn connection
  ' Tries to re-establish vpn connection
 
  Dim ReStartApps As Boolean = False
  
  Dim iConnectionTries As Integer
  Dim sMessage As String  
  Dim sCommand As String
 
  If sVPNname <> "" Then
      
    ReConnectingVPN = True
    
    KillApplis()
      
   ' WebStateUp = 0 means not connected to the internet
    If InStr(sRet, sVPNname) <> 0 And WebStateUp = False Then
              
      CheckConnections()
        
      If ActiveVPNConnectionFound = True Then
        Shell "nmcli con down id " & Shell$(sVPNname) Wait
      Endif
          
      sMessage = "Internet connection lost .. quitting VPN ... " 
      Print sMessage
      sMessage = AddTime(sMessage)     
      WriteToLogFile("Append", sMessage)
 
    Endif
      
    Wait 2 's
      
    iConnectionTries = 0
      
  Connect:
      
    iConnectionTries += 1
      
    CheckConnections()
       
    If ActiveVPNConnectionFound = False And sVPNname <> "" Then
       
      ' re-establish vpn connection
      Shell "nmcli con up id " & Shell$(sVPNname) Wait
       
      sMessage = "Trying to reconnect VPN ... "  
      Print sMessage
      sMessage = AddTime(sMessage)
      WriteToLogFile("Append", sMessage)
      
    End If
            
    Wait 1
        
   ' Check for active vpn connection
    CheckConnections()
      
   ' if vpn not connected after 3 tries probably lost internet connection
   ' so quit VPN Lifeguard
    If ActiveVPNConnectionFound = False And sVPNname <> "" Then
        
      If iConnectionTries <= 5 Then
                  
        Print "ConnectionTries = ", iConnectionTries
       'Message("ConnectionTries = " & iConnectionTries)
          
        If InternetConnectLostQuitApp = False Then
          
          iConnectionTries = 0
          
        Endif
 
        Wait 5 '5s
       
        Goto Connect
          
      Endif
        
      sMessage = "VPN connection lost .. probably lost internet connection .. quitting VPN Lifegaurd ... " 
      Print sMessage
      sMessage = AddTime(sMessage)
      WriteToLogFile("Append", sMessage)
      sCommand = "notify-send " & "'" & sMessage & "'"
      Shell sCommand
      cmdQuit_Click()
        
   Else If ActiveVPNConnectionFound = True And sVPNname <> "" Then
         
      ' flag that the vpn will be reconnected to restart monitored applications
      ReStartApps = True
      'bFlag = True
      'StartApps()
        
    Endif
      
    ReConnectingVPN = False
    
  Endif    
  
  If ReStartApps = True Then
    bFlag = True
    StartApps()
  Endif
  
End


Public Sub NotifySend(sMessage_1 As String, sMessage_2 As String)
  
  Dim Command As String
  
  Command = "notify-send --expire-time=1000 --hint=int:transient:1 " & "'" & sMessage_1 & "'" & " " & "'" & sMessage_2 & "'"
  Shell Command
  
End

Public Sub WriteToLogFile(sMode As String, sMessage As String)
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/log.txt"
  Dim command As String
  Dim last_lines As String
  'Dim FileSize As Integer
  
  If Not Exist(Folder) Then
    
    Mkdir Folder
    
  Endif
  
 ' Dim curr_time As String = GetTime()
  'Message("curr_time = " & curr_time)
  'Wait 1
  Sleep 0.1 
  Dim msg As String = sMessage
  
  If sMode = "Initialize" Then 
    
      ' Keep last 200 lines of log file
      command = "tail -n 200 " & FileName 
      Shell command To last_lines
      WriteToFile(FileName, last_lines)
      AppendToFile(FileName, msg)
    
  Else 
    
    AppendToFile(FileName, msg)
    
  Endif
  
End

Public Sub WriteToWebStatusFile(sMode As String, sMessage As String)
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/web_status.txt"
  Dim command As String
  Dim last_lines As String
  'Dim FileSize As Integer
  
  If Not Exist(Folder) Then
    
    Mkdir Folder
    
  Endif
  
 ' Dim curr_time As String = GetTime()
  'Message("curr_time = " & curr_time)
  'Wait 1
  Sleep 0.1 
  Dim msg As String = sMessage
  
  If sMode = "Initialize" Then 
    
      ' Keep last 200 lines of log file
      command = "tail -n 200 " & FileName 
      Shell command To last_lines
      WriteToFile(FileName, last_lines)
      AppendToFile(FileName, msg)
    
  Else 
    
    AppendToFile(FileName, msg)
    
  Endif
  
End

Public Sub WriteToFile(FileName As String, sMessage As String)
  
  Dim hFile As File
  
  hFile = Open FileName For Create
  sMessage = CheckForNewline(sMessage)
  'sMessage &= "\n"
  Write #hFile, sMessage
  
End

Public Sub AppendToFile(FileName As String, sMessage As String)
  
  Dim hFile As File
  
  hFile = Open FileName For Append
  sMessage = CheckForNewline(sMessage)
  'sMessage &= "\n"
  Write #hFile, sMessage
  
End

Public Function CheckForNewline(sMessage As String) As String
  
  If Not InStr(NL, sMessage) Then
    sMessage &= NL
  Endif
  
  Return sMessage
  
End


Public Sub cmdQuit_Click()
  
  FMain.Close
  
End

Public Sub Form_Close()
  
  NotifySend("Kill applications...", "")
  
  KillApplis
  
  NotifySend("Disconnection...", "")
  
  Wait 1
  
  ' disconnect vpn
  Shell "nmcli con down id " & Shell$(sVPNname)
  
  NotifySend("Disconnected", "")
  
  ' kill the monitoring DBus
  Flush
  pr.Close
  pr.Kill
  
End

Public Sub procDBusMonitor_Read()
  
  Dim sLine As String
  
  sLine = Read #Last, -256
  
  'If VPN_Found = True
  
  If InStr(sLine, "uint32 3") Then
    ' connected
    
    Print "connected", Time
    VPN_Found = True
    bFlag = True
    Disconnections = 0
    
  Endif
  
  If InStr(sLine, "uint32 6") Or InStr(sLine, "uint32 7") Then
    ' disconnected
    
    Disconnections += 1
    VPN_Found = False
    KillApplis
    Print "disconnected ", Time, Str$(Disconnections)
    NotifySend("VPN disconnected", "Attempted to Kill Applications...")
    lblStatusBar.Text = "Connection..."
    
  Endif
  
  'Endif
  
End

Private Sub KillApplis()
  
  ' The log file entries for this procedure can be used primarily to track if you have a process
  ' that can't be killed. If you check the log file often you might see entries that the Appication(s) couldn't
  ' be killed. Then you can Quit VPN Lifeguard and try to kill the process manually using the terminal,
  
  ' e.g. 'pkill appname' or 'killall appname'.
  
  ' Then if you can't kill the process usually you have to restart the OS. You can check if a process is still
  ' active with, e.g., 'pgrep appname'. If if lists a number(s), the process is still active.
  
  Dim chk As Object, k As Byte
  Dim chk_kill As String
  Dim sMessage As String
  Dim Kill_Attempts As Integer = 0
  Dim TimeExposed As Float
  Dim TimeStart As Float
  Dim TimeEnd As Float
  
  TimeStart = GetCurrentTime()
  
  For Each chk In FMain.Controls
    ' each checkbox
    If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then
      
      Kill_Attempts = 0
      
      For k = 1 To 4
        ' close applications
        
        ' Originally the edit here changed the "k" to 3 from 10,
        ' but it shouldn't take more than 4 attempts to close the application.
        ' So I changed the "k" loop to 4. That way the loop can finish and
        ' the vpn connection can be re-established, limiting application exposure.
        
        Apps_Killed = False
        
        Kill_Attempts += 1
        
        Shell "pkill " & chk.Text Wait
        
        'Sleep 0.01 's Give a little time to kill application
        
        Shell "pgrep " & chk.Text Wait To chk_kill
        
        'TimeEnd = GetCurrentTime()
        'TimeExposed = GetTimeElapsed(TimeStart, TimeEnd)
        
        If chk_kill = "" Then
          
          TimeEnd = GetCurrentTime()
          TimeExposed = GetTimeElapsed(TimeStart, TimeEnd)
          sMessage = "Connection lost ... killed " & chk.Text & " .... number of attempts = " & Str$(Kill_Attempts) & " ... time exposed = " & Str$(TimeExposed) & " seconds" 
          sMessage = AddTime(sMessage)
          WriteToLogFile("Append", sMessage)
          Apps_Killed = True
          Break
          
        Else If Kill_Attempts = 4 Then
          
          TimeEnd = GetCurrentTime()
          TimeExposed = GetTimeElapsed(TimeStart, TimeEnd)
          sMessage = "Connection lost ... couldn't kill " & chk.Text & " ... number of attempts = 4 ... time exposed = " & Str$(TimeExposed) & " seconds" 
          sMessage = AddTime(sMessage)
          WriteToLogFile("Append", sMessage)
          
        Endif
        
      Next
    Endif
  Next
  
  AppsStarted = False
  
End

Public Function GetCurrentTime() As Float
  
  Dim CurrentTime As Float
  Dim CurrentTimeStr As String
  
  Shell "date +%s%3N" To CurrentTimeStr
  CurrentTime = Val(CurrentTimeStr)
  Return CurrentTime
  
End

Public Function GetTimeElapsed(StartTime As Float, EndTime As Float) As Float
  
  Dim Elapsed As Float

  Elapsed = ((EndTime - StartTime) / 1000)
  Return Elapsed
  
End
