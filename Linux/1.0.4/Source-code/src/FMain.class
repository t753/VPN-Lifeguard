' Gambas class file

Private sVPNuuid As String ' ID of the VPN working connection
Private sVPNname As String ' Name of VPN working connection

Private sVPNuuidSettings As String ' ID of the VPN settings connection
Private sVPNnameSettings As String ' Name of VPN settings connection

Private sVPNuuidCurrent As String ' ID of the VPN current connection
Private sVPNnameCurrent As String ' Name of VPN current connection

Private sApplis As String ' Name of the application in process
Private sNumberApplis As String ' Number of applications

Private bFlag As Boolean ' Flag of connection after disconnection
Public Apps_Killed As Boolean ' Global flag that apps have been killed
Public ChangeVPN As Boolean = False ' Global flag to set true when VPN connection settings are being changed
Public VPN_Found As Boolean = False ' Global flag to set true when active VPN connection found
Public VPN_Found_Settings As Boolean = False ' Global flag to set true when active VPN connection found
Public Test As Boolean = False
Public CheckUseSettingsVPN As Boolean = True
'Public IP_Address As String

Public VPN_Connections[100, 3] As String
Public ConnectionTries As Integer = 0

Public pr As Process

Public Sub Form_Open()
  
  Dim Initialize As String = "Log File initialized " '& Now
  
  LoadVPN_Data()
  
  lblStatusBar.Text = "Disconnected"
  
  cmdAbout.SetFocus
  
  ' Read settings and set checkbox applications
  ReadSettings
  
  ' set monitoring on vpn connection
  pr = Shell "dbus-monitor --system type='signal',interface='org.freedesktop.NetworkManager.VPN.Connection',member='VpnStateChanged'" For Read As "procDBusMonitor"
  
  ' enable timer
  timerReload.Delay = 1000 ' 1 second
  timerReload.Enabled = True
  
  lblStatusBar.Text = "Connection..."
  
  'Shell "curl ifconfig.me" To IP_Address
  
  Initialize &= GetTime()  
  'Initialize &= " IP Address = " & IP_Address & " " & GetTime()  
  WriteToLogFile("Initialize", Initialize)
  
  LoadVPN_Data()
  
End

Public Function GetTime() As String
  
  Dim date_time As String
  
  Shell "date +'%Y-%m-%d %I:%M:%S'" To date_time
  
  Return date_time
  
End

Public Sub cmdConfig_Click()
  
  Dim iApplis As Byte
  
  If Message.Question("Do you want to modify the list of applications to manage ?", "Yes", "No") = 1 Then
    
  ask:
    sNumberApplis = InputBox("How many applications to manage ?", "Type a number")
    
    ' check format value
    
    If IsNumber(sNumberApplis) Then
      
      Settings["Applications to manage/N"] = CByte(sNumberApplis)
      
      For iApplis = 1 To 6
        
        If iApplis <= CByte(sNumberApplis) Then
          
          sApplis = InputBox("What is the name of the #" & iApplis & " application to manage ?" & Chr$(10) & " For example : transmission or firefox", "Type a name of application")
          
        Else
          
          sApplis = ""
          
        Endif ' Number applis
        
        Settings["Applications to manage/Appli #" & iApplis] = sApplis
        
      Next ' next checkbox / application
      
      ReadSettings ' and set checkbox
      
    Else
      Message("Please, type a number")
      Goto ask
    Endif
    
  Endif ' Prompt yes/no
  
  Store_VPN("Config")
  
  Settings.Save
  
  'CreateVPN_List_Files()
  
End

Public Sub ConnectVPN_Click()
  
  GetActiveVpnConnection("Init")
  
End

Public Sub GetActiveVpnConnection(sMode As String)
  
  Dim sVPNuuidLoop As String ' ID of the VPN loop connection
  Dim sVPNnameLoop As String ' Name of VPN loop connection
  Dim sVPNNameIndex As String
  Dim sRet As String
  Dim sVPNnameLen As Integer
  Dim sVPNuuidLen As Integer
  Dim ActiveLen As Integer
  
  Dim FirstColonPos As Integer
  Dim SecondColonPos As Integer
  Dim NewLinePos As Integer
  Dim Line_Begin As Integer
  Dim ActivePos As Integer
  Dim ctr As Integer 
  Dim ActiveState As String
  Dim ConnectionTries As Integer = 0
  Dim sOutput_Names As String = ""
  Dim sOutput_UUIDs As String = ""
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName1 As String = Folder & "/VPN_names.txt"
  Dim FileName2 As String = Folder & "/VPN_uuids.txt"
  Dim i As Integer
  Dim VPN_Loop_Found As Boolean
  
  sVPNnameSettings = Settings["VPN Connection/Name"]
  sVPNuuidSettings = Settings["VPN Connection/UUID"] 
  
  VPN_Loop_Found = False
  VPN_Found = False
  VPN_Found_Settings = False
  
  'Message("sVPNnameSettings = " & sVPNnameSettings)
GetConnection:
  
  ctr = 0
  ConnectionTries += 1
  ' get informations on connection to get name and vpn ID
  Shell "nmcli -t -f TYPE,NAME,UUID,ACTIVE c | grep vpn" To sRet
  
  Line_Begin = 0
  
  ' Find active VPN connection
  While sVPNnameLoop <> "vpn"
    
    FirstColonPos = InStr(sRet, ":", Line_Begin, 1)
    SecondColonPos = InStr(sRet, ":", FirstColonPos + 1, 1)
    ActivePos = InStr(sRet, ":", SecondColonPos + 1, 1)
    NewLinePos = InStr(sRet, Chr(10), ActivePos + 1, 1)
    
    sVPNnameLen = SecondColonPos - FirstColonPos - 1
    sVPNnameLoop = Mid(sRet, FirstColonPos + 1, sVPNnameLen)
    
    sVPNuuidLen = ActivePos - SecondColonPos - 1
    sVPNuuidLoop = Mid(sRet, SecondColonPos + 1, sVPNuuidLen)
    
    ActiveLen = NewLinePos - ActivePos - 1
    ActiveState = Mid(sRet, ActivePos + 1, ActiveLen)
    
    Line_Begin = NewLinePos + 1
    
    'Print Str$(ctr) & sVPNnameLoop
    
    If sVPNnameLoop <> "vpn"
      
      VPN_Connections[ctr, 1] = sVPNnameLoop
      VPN_Connections[ctr, 2] = sVPNuuidLoop
      
    Endif
    
    If sMode = "Init" And VPN_Loop_Found = False Then
      If ActiveState = "yes" Then 'Or ctr = 1 Then 'And Test = False Then
        If Message.Question("Do you want keep the following VPN Connection?" & Chr(10) & "VPN Connection = " & sVPNnameLoop, " Yes ", " No ") = 1 Then  
          
          'VPN_Found = True
          sVPNname = sVPNnameLoop
          sVPNuuid = sVPNuuidLoop
          sVPNnameCurrent = sVPNname
          sVPNuuidCurrent = sVPNuuid
          VPN_Loop_Found = True
          'Break
        Else
          
          Shell "nmcli con down uuid " & sVPNuuidLoop
          'Sleep 1 's
          
        Endif
      Endif
    Endif
   ' Message("sVPNname = " & sVPNname & "  sVPNnameLoop = " & sVPNnameLoop)
    ctr += 1
    
  Wend
  
  'If sMode = "Config" Then
  
  Print "Total VPNs = " & Str$(ctr)
  
  For i = 0 To ctr
    
    sOutput_Names &= (VPN_Connections[i, 1] & gb.NewLine)
    sOutput_UUIDs &= (VPN_Connections[i, 2] & gb.NewLine)
    
  Next
  
  File.Save(FileName1, sOutput_Names)
  File.Save(FileName2, sOutput_UUIDs)
  
  'Endif
  'Message("Prees OK To continue...")
  
  If ChangeVPN = False And sMode = "Init" Then ' And Test = False Then
    'If VPN_Found = True Then
    
    If CheckUseSettingsVPN = True
      
      If sVPNname <> sVPNnameSettings Then
        
        If sVPNname <> "" Then
          Store_VPN("Init")
        Endif
        
        If Message.Question("Would you like to connect to your VPN settings connection?" & Chr(10) & "VPN current Connection = " & sVPNname & Chr(10) & "VPN settings Connection = " & sVPNnameSettings, " Yes ", " No ") = 1 Then   
          
          If VPN_Found = True Then
            Shell "nmcli con down uuid " & sVPNuuid
          Endif
          sVPNname = sVPNnameSettings
          sVPNnameCurrent = sVPNname
          sVPNuuid = sVPNuuidSettings
          Shell "nmcli con up uuid " & sVPNuuid
          'VPN_Found = True
        Endif
        
        If Message.Question("Click Yes not to see the settings prompt any more this session ...", "Yes ", " No ") = 1 Then   
          CheckUseSettingsVPN = False
        Endif
        
      Endif
    Endif
    'If ChangeVPN = False Then ' And sMode = "Init" Then ' And Test = False Then
    
    For i = 0 To VPN_Names.Count - 1
      
      If VPN_Names[i].Selected And VPN_Loop_Found = False Then
        'Message("hListBoxItem = " & Str$(i))
        sVPNNameIndex = VPN_names[i].Text
        
        If sVPNname <> sVPNNameIndex Then
          'Message("VPN_Found = True")
          Shell "nmcli con down uuid " & sVPNuuid
          'Sleep 1 's
          
          sVPNname = VPN_Connections[i, 1]
          
          'Message("sVPNname = " & sVPNname & " VPN_Connections[i, 1] = " & VPN_Connections[i, 1])
          
          sVPNnameCurrent = sVPNname
          
          sVPNuuid = VPN_Connections[i, 2]
          sVPNuuidCurrent = sVPNuuid
          Shell "nmcli con up uuid " & sVPNuuid
          'VPN_Found = True
          ConnectionTries = 0
        Endif
      Endif
      
  Next 
    
    'If VPN_Found = False Then
    'Message("There are no VPN connections ..." & Chr(10) & "make sure you have a connection.") ' & Chr(10) & "then Select Yes to continue or No to exit the application." & Chr(10) & " VPN Connection = " & sVPNname, " Yes ", " No ") = 1 Then  
    'Endif
    
    'Endif     
    'Endif
  Endif
  
End

' Public Sub CreateVPN_File(FileName As String)
'   
'     Dim hFile As File
'     
'     hFile = Open FileName For Create
'     Write #hFile, ""
'   
' End

Public Sub ReadVPN_Data()
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName1 As String = Folder & "/VPN_names.txt"
  Dim FileName2 As String = Folder & "/VPN_uuids.txt"
  Dim hFile1 As File
  Dim hFile2 As File
  Dim sLine As String
  Dim ctr As Integer
  
  VPN_Names.List = Split(File.Load(FileName1), gb.NewLine)
  
  hFile1 = Open FileName1 For Read
  ctr = 1
  
  While Not Eof(hFile1)
    
    Line Input #hFile1, sLine
    VPN_Connections[ctr, 1] = sLine
    ctr += 1
    
  Wend
  
  hFile2 = Open FileName2 For Read
  ctr = 1
  
  While Not Eof(hFile2)
    
    Line Input #hFile2, sLine
    VPN_Connections[ctr, 2] = sLine
    ctr += 1
    
  Wend
  
End

Public Sub LoadVPN_Data()
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName1 As String = Folder & "/VPN_names.txt"
  Dim FileName2 As String = Folder & "/VPN_uuids.txt"
  
  If Not Exist(FileName1) Or Not Exist(FileName2) Then
    
    GetActiveVpnConnection("Config")
    
  Endif
  
  ReadVPN_Data()
  
End

Public Sub cmdAbout_Click()
  ' Show the about form
  
  FAbout.ShowModal
  
End

Private Sub Store_VPN(sMode As String)
  
  ' This procedure used by:
  ' - GetActiveVpnConnection() : to intilize VPN connection settings : sMode will be "Init"
  ' - cmdConfig_Click() : to change VPN connection and connection stored settings : sMode will be "Config"
  
  ChangeVPN = True
  
  If Message.Question("Do you want add the current VPN Connection to the settings?" & Chr(10) & "VPN current name= " & sVPNnameCurrent & Chr(10) & "VPN current settings = " & sVPNnameSettings & Chr(10) & "If settings is blank, choose Yes.", " Yes ", " No ") = 1 Then  
    
    ' If sMode = "Config" Then
    '   
    '   Shell "nmcli con down uuid " & sVPNuuid
    '   Sleep 1 's
    '   Message("Select your new VPN connection, wait for it to establish, then select OK.")
    '   GetActiveVpnConnection("Config")
    '  
    ' Endif
    
    If VPN_Found = True Then
      
      'Message("sVPNname 4 = " & sVPNname & " sVPNnameSettings 4 = " & sVPNnameSettings & " sVPNnameCurrent 4 = " & sVPNnameCurrent)
      Settings["VPN Connection/Name"] = sVPNnameCurrent
      Settings["VPN Connection/UUID"] = sVPNuuidCurrent
      Settings.Save
      Sleep 2
      sVPNnameSettings = Settings["VPN Connection/Name"]
      sVPNuuidSettings = Settings["VPN Connection/UUID"] 
      
    Endif
    
  Endif ' Prompt yes/no
  
  ChangeVPN = False
  
End

Private Sub ReadSettings()
  ' Read settings and set checkbox applications
  
  Dim chk As Object, k As Byte
  
  ' Get the number of applications to manage
  sNumberApplis = Settings["Applications to manage/N", 0]
  
  k = 1 ' initialize
  
  ' For each checkbox of applications
  For Each chk In FMain.Controls
    
    ' If control is a checkbox
    If chk.Tag = "chkApplis" Then
      
      ' Get settings of applications'name
      sApplis = Settings["Applications to manage/Appli #" & k, ""]
      
      If k <= CByte(sNumberApplis) Then
        ' Appli to manage
        chk.Text = sApplis
        chk.visible = True
        chk.value = True
      Else
        ' No application
        chk.Text = ""
        chk.visible = False
        chk.value = False
      Endif
      
      Inc k
      
    Endif
  Next
  
End

Public Sub timerReload_Timer()
  
  Dim chk As Object
  Dim sRet As String
  Dim command As String
  Dim Entry As String = "VPN Connection re-established and Application(s) restarted " '& Now
  Dim Couldnt_Kill As String = "VPN Connection re-established and Application(s) already running " '& Now
  Dim sMessage As String
  
  ' Timer to check state of VPN connection
  ' if connected = ok, nothing to do
  ' if disconnected = connect and reload applis
  
  timerReload.Delay = 10000 ' 10 seconds
  
  ' get status of all connections
  command = "nmcli con show --active | grep " & sVPNname
  Shell command To sRet
  
  ' check state of vpn
  If InStr(sRet, sVPNname) Then
    
    'Shell "curl ifconfig.me" To IP_Address
    
    ' connected = ok
    'lblStatusBar.Text = "Connected + monitoring"
    lblStatusBar.Text = "Connected + monitoring : VPN = " & sVPNname
    
    If bFlag = True Then
      ' after reconnection, reload applis
      bFlag = False
      
      'Shell "notify-send --expire-time=1000 --hint=int:transient:1 'VPN connected'"
      NotifySend("VPN connected", "")
      lblStatusBar.Text = "Connected and reloading applications..."
      
      For Each chk In FMain.Controls
        ' each checkbox
        If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then
          ' load applications
          
          If Apps_Killed = True Then
            sMessage = Entry & GetTime() 
            'sMessage = Entry & " IP Address = " & IP_Address & " " & GetTime() 
          Else
            sMessage = Couldnt_Kill & GetTime() 
            'sMessage = Couldnt_Kill & " IP Address = " & IP_Address & " " & GetTime() 
          Endif
          
          Shell "exec " & chk.Text
          WriteToLogFile("Append", sMessage)
          
        Endif
        
      Next
      
      lblStatusBar.Text = "Connected + monitoring"
      
    Endif
    
  Else
    
    ' disconnected then reconnection   
    
    Wait 1 's
    
    ConnectionTries += 1
    
    If ConnectionTries <= 3 Then
      If ChangeVPN = False Then 'And VPN_Found = True Then
        
        Shell "nmcli con up uuid " & sVPNuuid
        
      Endif
    Else
      ConnectVPN_Click()
    Endif
    'Sleep 2.0 's Wait for VPN Connection to be re-established
    
    ' flag that the vpn will be reconnected
    bFlag = True
    
  Endif
  
  'Apps_Killed = False
  
End

Public Sub NotifySend(sMessage_1 As String, sMessage_2 As String)
  
  Dim Command As String
  
  Command = "notify-send --expire-time=1000 --hint=int:transient:1 " & "'" & sMessage_1 & "'" & " " & "'" & sMessage_2 & "'"
  Shell Command
  
End

Public Sub WriteToLogFile(sMode As String, sMessage As String)
  
  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/log.txt"
  Dim FileSize As Integer
  
  If Not Exist(Folder) Then
    
    Mkdir Folder
    
  Endif
  
  If sMode = "Initialize" Then 
    
    If Not Exist(FileName) Then
      
      WriteToFile(FileName, sMessage)
      
    Else
      
      With Stat(FileName)
        FileSize = Round(.Size / 1024)
      End With
      
      If FileSize > 50 Then
        
        Shell "rm " & FileName
        Wait 1 's
        WriteToFile(FileName, sMessage)
        
      Else
        
        AppendToFile(FileName, sMessage)
        
      Endif
      
    Endif
    
  Else 
    
    AppendToFile(FileName, sMessage)
    
  Endif
  
End

Public Sub WriteToFile(FileName As String, sMessage As String)
  
  Dim hFile As File
  
  hFile = Open FileName For Create
  sMessage = sMessage & Chr(10)
  Write #hFile, sMessage
  
End

Public Sub AppendToFile(FileName As String, sMessage As String)
  
  Dim hFile As File
  
  hFile = Open FileName For Append
  sMessage = sMessage & Chr(10)
  Write #hFile, sMessage
  
End

Public Sub cmdQuit_Click()
  
  FMain.Close
  
End

Public Sub Form_Close()
  
  NotifySend("Kill applications...", "")
  
  KillApplis
  
  NotifySend("Disconnection...", "")
  
  Wait 1
  
  ' disconnect vpn
  Shell "nmcli con down uuid " & sVPNuuid
  
  NotifySend("Disconnected", "")
  
  ' kill the monitoring DBus
  Flush
  pr.Close
  pr.Kill
  
End

Public Sub procDBusMonitor_Read()
  
  Dim sLine As String
  
  sLine = Read #Last, -256
  
  'If VPN_Found = True
  
  If InStr(sLine, "uint32 3") Then
    ' connected
    Print "connected", Time
    ' VPN_Found = True
    VPN_Found = True
    bFlag = True
    
  Endif
  
  If InStr(sLine, "uint32 6") Or InStr(sLine, "uint32 7") Then
    ' disconnected
    
    'If Apps_Killed = False Then
    
    'VPN_Found = False
    KillApplis
    Print "disconnected", Time
    NotifySend("VPN disconnected", "Attempted to Kill Applications...")
    lblStatusBar.Text = "Connection..."
    
    'Endif
    
  Endif
  
  'Endif
  
End

Private Sub KillApplis()
  
  ' The log file entries for this procedure can be used primarily to track if you have a process
  ' that can't be killed. If you check the log file often you might see entries that the Appication(s) couldn't
  ' be killed. Then you can Quit VPN Ligeguard and try to kill the process manually using the terminal,
  
  ' e.g. 'pkill appname' or 'killall appname'.
  
  ' Then if you can't kill the process usually you have to restart the OS. You can check if a process is still
  ' active with, e.g., 'pgrep appname'. If if lists a number(s), the process is still active.
  
  Dim chk As Object, k As Byte
  Dim chk_kill As String
  Dim sMessage As String
  Dim Kill_Attempts As Integer = 0
  Dim TimeExposed As Float
  Dim TimeStart As Float
  Dim TimeEnd As Float
  
  TimeStart = GetCurrentTime()
  
  For Each chk In FMain.Controls
    ' each checkbox
    If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then
      
      For k = 1 To 4
        ' close applications
        
        ' Originally the edit here changed the "k" to 10 from 3,
        ' but it shouldn't take more than 3 attempts to close the application.
        ' So I changed the "k" loop to 4. That way the loop can finish and
        ' the vpn connection can be re-established, limiting application exposure.
        
        Apps_Killed = False
        
        Kill_Attempts += 1
        
        Shell "killall " & chk.Text
        
        'Sleep 0.05 's Give a little time to kill application
        
        Shell "pgrep " & chk.Text To chk_kill
        
        TimeEnd = GetCurrentTime()
        TimeExposed = GetTimeElapsed(TimeStart, TimeEnd)
        
        If chk_kill = "" Then
          
          sMessage = "Connection lost ... Killed " & chk.Text & " .... number of attempts = " & Str$(Kill_Attempts) & " ... time exposed = " & Str$(TimeExposed) & " seconds " & GetTime() 
          WriteToLogFile("Append", sMessage)
          Apps_Killed = True
          Break
          
        Else If Kill_Attempts = 4 Then
          
          sMessage = "Connection lost ... Couldn't Kill " & chk.Text & " ... number of attempts = 4 ... time exposed = " & Str$(TimeExposed) & " seconds " & GetTime()
          WriteToLogFile("Append", sMessage)
          
        Endif
        
      Next
    Endif
  Next
  
End

Public Function GetCurrentTime() As Float
  
  Dim CurrentTime As Float
  Dim CurrentTimeStr As String
  
  Shell "date +%s%3N" To CurrentTimeStr
  CurrentTime = Val(CurrentTimeStr)
  Return CurrentTime
  
End

Public Function GetTimeElapsed(StartTime As Float, EndTime As Float) As Float
  
  Dim Elapsed As Float

  Elapsed = ((EndTime - StartTime) / 1000)
  Return Elapsed
  
End
