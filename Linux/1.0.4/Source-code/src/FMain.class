' Gambas class file

Private sVPNuuid As String ' ID of the VPNsRet connection
Private sVPNname As String ' Name of VPN connection
Private sApplis As String ' Name of the application in process
Private sNumberApplis As String ' Number of applications
Private bFlag As Boolean ' Flag of connection after disconnection
Public pr As Process

Public Sub Form_Open()

  Dim sRet As String
  Dim sVPNnameLen As Integer
  Dim sVPNuuidLen As Integer
  
  Dim FirstColonPos As Integer
  Dim SecondColonPos As Integer
  Dim NewLinePos As Integer
  Dim Initialize As String = "Log File initialized " '& Now


  ' get informations on connection to get name and vpn ID
  Shell "nmcli -t -f TYPE,NAME,UUID c | grep vpn" To sRet
 
  FirstColonPos = InStr(sRet, ":", 0, 1)
  SecondColonPos = InStr(sRet, ":", FirstColonPos + 1, 1)
  NewLinePos = InStr(sRet, Chr(10), SecondColonPos + 1, 1)
  
  sVPNnameLen = SecondColonPos - FirstColonPos - 1
  sVPNname = Mid(sRet, FirstColonPos + 1, sVPNnameLen)
  
  sVPNuuidLen = NewLinePos - SecondColonPos - 1
  sVPNuuid = Mid(sRet, SecondColonPos + 1, sVPNuuidLen)

  lblStatusBar.Text = "Disconnected"

  cmdAbout.SetFocus

  ' Read settings and set checkbox applications
  ReadSettings

  ' set monitoring on vpn connection
  pr = Shell "dbus-monitor --system type='signal',interface='org.freedesktop.NetworkManager.VPN.Connection',member='VpnStateChanged'" For Read As "procDBusMonitor"

  ' enable timer
  timerReload.Delay = 1000 ' 1 second
  timerReload.Enabled = True
   
  lblStatusBar.Text = "Connection..."
  
  Initialize &= GetTime()
  WriteToLogFile("Initialize", Initialize)

End

Public Function GetTime() As String
  
  Dim date_time As String
  
  Shell "date +'%Y-%m-%d %H:%M:%S'" To date_time
  
  Return date_time
  
End


Public Sub cmdConfig_Click()

  Dim iApplis As Byte

  If Message.Question("Do you want to modify the list of applications to manage ?", "Yes", "No") = 1 Then

  ask:
    sNumberApplis = InputBox("How many applications to manage ?", "Type a number")

    ' check format value

    If IsNumber(sNumberApplis) Then

      Settings["Applications to manage/N"] = CByte(sNumberApplis)

      For iApplis = 1 To 6

        If iApplis <= CByte(sNumberApplis) Then

          sApplis = InputBox("What is the name of the #" & iApplis & " application to manage ?" & Chr$(10) & " For example : transmission or firefox", "Type a name of application")

        Else

          sApplis = ""

        Endif ' Number applis

        Settings["Applications to manage/Appli #" & iApplis] = sApplis

      Next ' next checkbox / application

      ReadSettings ' and set checkbox

    Else
      Message("Please, type a number")
      Goto ask
    Endif

  Endif ' Prompt yes/no

End

Public Sub cmdAbout_Click()
  ' Show the about form

  FAbout.ShowModal

End

Private Sub ReadSettings()
  ' Read settings and set checkbox applications

  Dim chk As Object, k As Byte

  ' Get the number of applications to manage
  sNumberApplis = Settings["Applications to manage/N", 0]

  k = 1 ' initialize

  ' For each checkbox of applications

  For Each chk In FMain.Controls

    ' If control is a checkbox
    If chk.Tag = "chkApplis" Then

      ' Get settings of applications'name
      sApplis = Settings["Applications to manage/Appli #" & k, ""]

      If k <= CByte(sNumberApplis) Then
        ' Appli to manage
        chk.Text = sApplis
        chk.visible = True
        chk.value = True
      Else
        ' No application
        chk.Text = ""
        chk.visible = False
        chk.value = False
      Endif

      Inc k

    Endif
  Next

End

Public Sub timerReload_Timer()

  Dim chk As Object
  Dim sRet As String
  Dim command As String
  Dim Entry As String = "VPN Connection re-established and Application(s) restarted " '& Now
  Dim Couldnt_Kill As String = "VPN Connection re-established and Application(s) already running " '& Now
  Dim sMessage As String
  
  ' Timer to check state of VPN connection
  ' if connected = ok, nothing to do
  ' if disconnected = connect and reload applis

  timerReload.Delay = 10000 ' 10 seconds

  ' get status of all connections
  command = "nmcli con show --active | grep " & sVPNname
  Shell command To sRet
 
  ' check state of vpn
  If InStr(sRet, sVPNname) Then

    ' connected = ok
    lblStatusBar.Text = "Connected + monitoring"

    If bFlag = True Then
      ' after reconnection, reload applis
      bFlag = False

      Shell "notify-send 'VPN connected'"
      lblStatusBar.Text = "Connected and reloading applications..."

      For Each chk In FMain.Controls
        ' each checkbox
        If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then
          ' load applications
            
            If Apps_Killed = True Then
              sMessage = Entry & GetTime()
            Else
              sMessage = Couldnt_Kill & GetTime()
            Endif
            
            Shell "exec " & chk.Text
            WriteToLogFile("Append", sMessage)

        Endif
        
      Next

      lblStatusBar.Text = "Connected + monitoring"

    Endif

  Else

    ' disconnected then reconnection   
    
    Wait 1 's
 
    Shell "nmcli con up uuid " & sVPNuuid

    'Wait 2 's

    ' flag that the vpn will be reconnected
    bFlag = True
  

  Endif

End

Public Sub cmdQuit_Click()

  FMain.Close

End

Public Sub Form_Close()

  Shell "notify-send 'Kill applications...'"

  KillApplis

  Shell "notify-send 'Disconnection...'"
  
  Wait 1

  ' disconnect vpn
  Shell "nmcli con down uuid " & sVPNuuid

  Shell "notify-send 'Disconnected'"

  ' kill the monitoring DBus
  Flush
  pr.Close
  pr.Kill

End



Public Sub procDBusMonitor_Read()

  Dim sLine As String

  sLine = Read #Last, -256

  If InStr(sLine, "uint32 3") Then
    ' connected
    Print "connected", Time
  Endif

  If InStr(sLine, "uint32 6") Or InStr(sLine, "uint32 7") Then
    ' disconnected
    KillApplis
    Print "disconnected", Time
    Shell "notify-send 'VPN disconnected' 'Connection...'"
    lblStatusBar.Text = "Connection..."
  Endif

End

Public Sub WriteToLogFile(sMode As String, sMessage As String)

  Dim Folder As String = "~/.vpnlifeguard"
  Dim FileName As String = Folder & "/log.txt"
  Dim FileSize As Integer
  
  If Not Exist(Folder) Then
  
    Mkdir Folder
  
  Endif

  If sMode = "Initialize" Then 
    
    If Not Exist(FileName) Then
  
      'Initialize = Initialize & Now
      WriteToFile(FileName, sMessage)
  
    Else
      
      With Stat(FileName)
        FileSize = Round(.Size / 1024)
      End With
      
      If FileSize > 50 Then
        
        Shell "rm " & FileName
        Wait 1 's
        WriteToFile(FileName, sMessage)
     
      Else
  
        'Initialize = Initialize & Now
        AppendToFile(FileName, sMessage)
    
      Endif
      
    Endif
  
  
  Else 
  
    'Entry_Error = Entry_Error & Now
    AppendToFile(FileName, sMessage)
     
  Endif
 
End

Public Sub WriteToFile(FileName As String, sMessage As String)
  
    Dim hFile As File
    
    hFile = Open FileName For Create
    sMessage = sMessage & Chr(10)
    Write #hFile, sMessage
    
End

Public Sub AppendToFile(FileName As String, sMessage As String)

    Dim hFile As File
    
    hFile = Open FileName For Append
    sMessage = sMessage & Chr(10)
    Write #hFile, sMessage

End

Private Sub KillApplis()

  ' The log file entries for this procedure can be used primarily to track if you have a process
  ' that can't be killed, like sometimes what happens with qbittorrent. If you check the log file
  ' often you might see entries that the Appication(s) couldn't be killed. Then you can quit VPN Ligeguard
  ' and try to kill the process manually using the terminal, e.g. 'pkill qbittorrent' or 'killall qbittorrent'.
  ' Then if you can't kill the process usually you have to restart the OS. You can check if a process is still
  ' active with, e.g., 'pgrep qbittorrent'. If if lists a number(s), the process is still active.
  
  Dim chk As Object, k As Byte
  Dim chk_kill As String
  Dim sMessage As String
  Dim Kill_Attempts As Integer = 0
  Dim TimeExposed As Float
  Dim TimeStart As Float
  Dim TimeEnd As Float
  
  TimeStart = GetCurrentTime()
  
  For Each chk In FMain.Controls
    ' each checkbox
    If (chk.Tag = "chkApplis") And If (chk.Text <> "") And If (chk.value = True) Then
       
        For k = 1 To 4
          ' close applications
          
          ' Originally the edit here changed the "k" to 10 from 3,
          ' but it shouldn't take more than 3 attempts to close the application.
          ' So I changed the "k" loop to 4 so as not to give the application
          ' exposure any more than necesaary. That way the loop can finish and
          ' the vpn connection can be re-established, limiting application exposure.
          
          Kill_Attempts += 1
                  
          If Kill_Attempts = 1 Then
                 
            sMessage = "Connection lost ... Trying to Kill Application(s) ... " & GetTime()
            WriteToLogFile("Append", sMessage)
         
          Endif
          
          Shell "killall " & chk.Text
          
          Sleep 0.05 's Give a little time for system to kill application
          
          Shell "pgrep " & chk.Text To chk_kill
          
          If chk_kill = "" Then 
         
            TimeEnd = GetCurrentTime()
            TimeExposed = GetTimeElapsed(TimeStart, TimeEnd)
            sMessage = "Application(s) ... killed ... number of attempts = " & Str$(Kill_Attempts) & " ... time exposed = " & Str$(TimeExposed) & " seconds " & GetTime() 
            WriteToLogFile("Append", sMessage)
         
            Apps_Killed = True
            Break
              
          Endif
          
          If Kill_Attempts = 4 Then
          
            TimeEnd = GetCurrentTime()
            TimeExposed = GetTimeElapsed(TimeStart, TimeEnd)
            sMessage = "Couldn't Kill Application(s) ... number of attempts = 4 ... " & " time exposed = " & Str$(TimeExposed) & " seconds " & GetTime()
            WriteToLogFile("Append", sMessage)
          
          Endif
       Next
     Endif
  Next

End

Public Function GetCurrentTime() As Float

  Dim CurrentTime As Float
  Dim CurrentTimeStr As String
 
  Shell "date +%s%3N" To CurrentTimeStr
  CurrentTime = Val(CurrentTimeStr)
  Return CurrentTime
  
End

Public Function GetTimeElapsed(StartTime As Float, EndTime As Float) As Float
  
  Dim Elapsed As Float
  Elapsed = ((EndTime - StartTime) / 1000)
  Return Elapsed
  
End
